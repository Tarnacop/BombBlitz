package test.networking;

import static org.junit.Assert.*;

import java.awt.Point;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.util.ArrayList;
import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import bomber.game.AudioEvent;
import bomber.game.Block;
import bomber.game.Bomb;
import bomber.game.GameState;
import bomber.game.Map;
import bomber.game.Movement;
import bomber.game.Player;
import bomber.networking.ClientPacketEncoder;
import bomber.networking.ClientServerLobbyRoom;
import bomber.networking.ClientServerPlayer;
import bomber.networking.ClientServerRoom;
import bomber.networking.ServerClientInfo;
import bomber.networking.ServerClientTable;
import bomber.networking.ServerPacketEncoder;
import bomber.networking.ServerRoom;
import bomber.networking.ServerRoomTable;

public class PacketEncodeDecodeTest {

	private byte[] array;
	ServerClientTable clientTable;
	ServerRoomTable roomTable;
	private byte[] referencePlayerListArray;
	private byte[] referenceRoomListArray;
	private byte[] referenceRoomArray;
	private byte[] referenceGameStateArray;

	@Before
	public void setUp() throws Exception {
		array = new byte[2000];
		clientTable = new ServerClientTable(32);
		for (int i = 0; i < 32; i++) {
			SocketAddress sockAddr = new InetSocketAddress("12.12.12." + i, 1221);
			ServerClientInfo client = new ServerClientInfo(sockAddr, "client " + i);
			clientTable.put(client);
		}
		roomTable = new ServerRoomTable(32);
		for (int i = 0; i < 32; i++) {
			ServerRoom room = new ServerRoom("test_room " + i, clientTable.get(i), i);
			roomTable.put(room);
		}
		referencePlayerListArray = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
				0x74, 0x20, 0x30, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x31,
				0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x32, 0x00, 0x00, 0x00,
				0x00, 0x03, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x33, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08,
				0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x34, 0x00, 0x00, 0x00, 0x00, 0x05, 0x08, 0x63, 0x6c, 0x69,
				0x65, 0x6e, 0x74, 0x20, 0x35, 0x00, 0x00, 0x00, 0x00, 0x06, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
				0x20, 0x36, 0x00, 0x00, 0x00, 0x00, 0x07, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x37, 0x00,
				0x00, 0x00, 0x00, 0x08, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x38, 0x00, 0x00, 0x00, 0x00,
				0x09, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x39, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x09, 0x63,
				0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x31, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x09, 0x63, 0x6c, 0x69,
				0x65, 0x6e, 0x74, 0x20, 0x31, 0x31, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
				0x74, 0x20, 0x31, 0x32, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20,
				0x31, 0x33, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x31, 0x34,
				0x00, 0x00, 0x00, 0x00, 0x0f, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x31, 0x35, 0x00, 0x00,
				0x00, 0x00, 0x10, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x31, 0x36, 0x00, 0x00, 0x00, 0x00,
				0x11, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x31, 0x37, 0x00, 0x00, 0x00, 0x00, 0x12, 0x09,
				0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x31, 0x38, 0x00, 0x00, 0x00, 0x00, 0x13, 0x09, 0x63, 0x6c,
				0x69, 0x65, 0x6e, 0x74, 0x20, 0x31, 0x39, 0x00, 0x00, 0x00, 0x00, 0x14, 0x09, 0x63, 0x6c, 0x69, 0x65,
				0x6e, 0x74, 0x20, 0x32, 0x30, 0x00, 0x00, 0x00, 0x00, 0x15, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
				0x20, 0x32, 0x31, 0x00, 0x00, 0x00, 0x00, 0x16, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x32,
				0x32, 0x00, 0x00, 0x00, 0x00, 0x17, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x32, 0x33, 0x00,
				0x00, 0x00, 0x00, 0x18, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x32, 0x34, 0x00, 0x00, 0x00,
				0x00, 0x19, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x32, 0x35, 0x00, 0x00, 0x00, 0x00, 0x1a,
				0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x32, 0x36, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x09, 0x63,
				0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x32, 0x37, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x09, 0x63, 0x6c, 0x69,
				0x65, 0x6e, 0x74, 0x20, 0x32, 0x38, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
				0x74, 0x20, 0x32, 0x39, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20,
				0x33, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x33, 0x31,
				0x00 };
		referenceRoomListArray = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f,
				0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x30, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x01, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x31,
				0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x0b,
				0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x32, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00,
				0x02, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72,
				0x6f, 0x6f, 0x6d, 0x20, 0x33, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0x03,
				0x00, 0x00, 0x00, 0x04, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x34, 0x01,
				0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x0b, 0x74,
				0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x35, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x05,
				0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f,
				0x6f, 0x6d, 0x20, 0x36, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00,
				0x00, 0x00, 0x07, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x37, 0x01, 0x04,
				0x00, 0x00, 0x00, 0x00, 0x07, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x0b, 0x74, 0x65,
				0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x38, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x08, 0x01,
				0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f,
				0x6d, 0x20, 0x39, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x09, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,
				0x00, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x31, 0x30, 0x01, 0x04,
				0x00, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0b, 0x0c, 0x74, 0x65,
				0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x31, 0x31, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x0b,
				0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f,
				0x6f, 0x6d, 0x20, 0x31, 0x32, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x00, 0x0c,
				0x00, 0x00, 0x00, 0x0d, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x31, 0x33,
				0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0e, 0x0c,
				0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x31, 0x34, 0x01, 0x04, 0x00, 0x00, 0x00,
				0x00, 0x0e, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0f, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f,
				0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x31, 0x35, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x00, 0x00,
				0x00, 0x0f, 0x00, 0x00, 0x00, 0x10, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20,
				0x31, 0x36, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
				0x11, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x31, 0x37, 0x01, 0x04, 0x00,
				0x00, 0x00, 0x00, 0x11, 0x01, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x0c, 0x74, 0x65, 0x73,
				0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x31, 0x38, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x12, 0x01,
				0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x13, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f,
				0x6d, 0x20, 0x31, 0x39, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x13, 0x01, 0x00, 0x00, 0x00, 0x13, 0x00,
				0x00, 0x00, 0x14, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x32, 0x30, 0x01,
				0x04, 0x00, 0x00, 0x00, 0x00, 0x14, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x15, 0x0c, 0x74,
				0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x32, 0x31, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00,
				0x15, 0x01, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x16, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72,
				0x6f, 0x6f, 0x6d, 0x20, 0x32, 0x32, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x16, 0x01, 0x00, 0x00, 0x00,
				0x16, 0x00, 0x00, 0x00, 0x17, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x32,
				0x33, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x17, 0x01, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x18,
				0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x32, 0x34, 0x01, 0x04, 0x00, 0x00,
				0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x19, 0x0c, 0x74, 0x65, 0x73, 0x74,
				0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x32, 0x35, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x19, 0x01, 0x00,
				0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x1a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d,
				0x20, 0x32, 0x36, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00,
				0x00, 0x1b, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x32, 0x37, 0x01, 0x04,
				0x00, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x1c, 0x0c, 0x74, 0x65,
				0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x32, 0x38, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x1c,
				0x01, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1d, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f,
				0x6f, 0x6d, 0x20, 0x32, 0x39, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x01, 0x00, 0x00, 0x00, 0x1d,
				0x00, 0x00, 0x00, 0x1e, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x33, 0x30,
				0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x01, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x1f, 0x0c,
				0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x33, 0x31, 0x01, 0x04, 0x00, 0x00, 0x00,
				0x00, 0x1f, 0x01, 0x00, 0x00, 0x00, 0x1f };
		referenceRoomArray = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x54, 0x65, 0x73, 0x74, 0x20,
				0x52, 0x6f, 0x6f, 0x6d, 0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x09,
				0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x31, 0x32, 0x00, 0x00, 0x01, 0x01, 0x01 };
		referenceGameStateArray = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x0f, 0x05, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x07, (byte) 0x82, 0x01, 0x1c, 0x12, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, (byte) 0xff,
				(byte) 0xf8, 0x7c, 0x30, 0x00, 0x61, (byte) 0xf0, (byte) 0xff, (byte) 0xff, 0x01, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x64, 0x40, 0x72, (byte) 0xc0,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x30, 0x01, 0x01,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00,
				0x00, 0x00, 0x05, 0x00, 0x1f };
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void testPlayerList() {
		int ret = 0;
		try {
			ret = ServerPacketEncoder.encodePlayerList(clientTable, array);
		} catch (IOException e) {
			fail("encodePlayerList: " + e);
		}
		byte[] arr = new byte[ret];
		System.arraycopy(array, 0, arr, 0, ret);

		assertArrayEquals(referencePlayerListArray, arr);

		List<ClientServerPlayer> playerList = null;
		try {
			playerList = ClientPacketEncoder.decodePlayerList(arr, ret);
		} catch (IOException e) {
			fail("decodePlayerList: " + e);
		}

		assertEquals(clientTable.size(), playerList.size());
	}

	@Test
	public void testRoomList() {
		int ret = 0;
		try {
			ret = ServerPacketEncoder.encodeRoomList(roomTable, array);
		} catch (IOException e) {
			fail("encodeRoomList: " + e);
		}
		byte[] arr = new byte[ret];
		System.arraycopy(array, 0, arr, 0, ret);

		assertArrayEquals(referenceRoomListArray, arr);

		List<ClientServerLobbyRoom> roomList = null;
		try {
			roomList = ClientPacketEncoder.decodeRoomList(arr, ret);
		} catch (IOException e) {
			fail("decodeRoomList: " + e);
		}

		assertEquals(roomTable.size(), roomList.size());
	}

	@Test
	public void testRoom() {
		SocketAddress sockAddr = new InetSocketAddress("12.12.12.12", 12);
		ServerClientInfo client = new ServerClientInfo(sockAddr, "client " + 12);
		ServerRoom room = new ServerRoom("Test Room", client, 3, 1);
		room.addAI();
		room.addAI();

		int ret = 0;
		try {
			ret = ServerPacketEncoder.encodeRoom(room, array);
		} catch (IOException e) {
			fail("encodeRoom: " + e);
		}
		byte[] arr = new byte[ret];
		System.arraycopy(array, 0, arr, 0, ret);

		assertArrayEquals(referenceRoomArray, arr);

		ClientServerRoom roomDecoded = null;
		try {
			roomDecoded = ClientPacketEncoder.decodeRoom(arr, ret);
		} catch (IOException e) {
			fail("decodeRoom: " + e);
		}

		assertEquals(room.getName(), roomDecoded.getName());
		assertEquals(room.getMaxPlayer(), roomDecoded.getMaxPlayer());
		assertEquals(room.getMapID(), roomDecoded.getMapID());
		assertEquals(room.getHumanPlayerNumber(), roomDecoded.getHumanPlayerNumber());
		assertEquals(room.getAIPlayerNumber(), roomDecoded.getAIPlayerNumber());
		assertEquals(room.getPlayerNumber(), roomDecoded.getHumanPlayerNumber() + roomDecoded.getAIPlayerNumber());
	}

	@Test
	public void testGameState() {
		Player testPlayer = new Player("testPlayer", new Point(64, 64), 100, 300, null);
		testPlayer.getKeyState().setBomb(true);
		testPlayer.getKeyState().setMovement(Movement.RIGHT);
		ArrayList<Player> testPlayerList = new ArrayList<Player>();
		testPlayerList.add(testPlayer);

		Block[][] testGridMap = new Block[][] { { Block.SOLID, Block.SOLID, Block.SOLID, Block.SOLID, Block.SOLID },
				{ Block.SOLID, Block.BLANK, Block.BLANK, Block.BLANK, Block.SOLID },
				{ Block.SOLID, Block.BLANK, Block.BLANK, Block.BLANK, Block.SOLID },
				{ Block.SOLID, Block.BLANK, Block.BLANK, Block.BLANK, Block.SOLID },
				{ Block.SOLID, Block.SOFT, Block.SOFT, Block.SOFT, Block.SOLID },

				{ Block.SOLID, Block.SOLID, Block.SOFT, Block.SOLID, Block.SOLID },
				{ Block.SOLID, Block.SOLID, Block.SOFT, Block.SOLID, Block.SOLID },
				{ Block.SOLID, Block.SOLID, Block.BLANK, Block.SOLID, Block.SOLID },
				{ Block.SOLID, Block.SOLID, Block.BLANK, Block.SOLID, Block.SOLID },
				{ Block.SOLID, Block.SOLID, Block.BLANK, Block.SOLID, Block.SOLID },

				{ Block.SOLID, Block.SOFT, Block.SOFT, Block.SOFT, Block.SOLID },
				{ Block.SOLID, Block.BLANK, Block.BLANK, Block.SOFT, Block.SOLID },
				{ Block.SOLID, Block.BLANK, Block.BLANK, Block.SOFT, Block.SOLID },
				{ Block.SOLID, Block.SOFT, Block.BLANK, Block.SOFT, Block.SOLID },
				{ Block.SOLID, Block.SOLID, Block.SOLID, Block.SOLID, Block.SOLID } };
		Map testMap = new Map("test map", testGridMap, new ArrayList<>());

		GameState testGameState = new GameState(testMap, testPlayerList);
		List<Bomb> testBombList = testGameState.getBombs();
		testBombList.add(new Bomb("test Bomb", new Point(5, 5), 5, 5));
		List<AudioEvent> testAudioList = testGameState.getAudioEvents();
		testAudioList.add(AudioEvent.EXPLOSION);
		testAudioList.add(AudioEvent.PLACE_BOMB);
		testAudioList.add(AudioEvent.PLAYER_DEATH);
		testAudioList.add(AudioEvent.MOVEMENT);
		testAudioList.add(AudioEvent.POWERUP);

		int ret = 0;
		try {
			ret = ServerPacketEncoder.encodeGameState(testGameState, 123, array);
		} catch (IOException e) {
			fail("encodeGameState: " + e);
		}

		byte[] arr = new byte[ret];
		System.arraycopy(array, 0, arr, 0, ret);

		assertArrayEquals(referenceGameStateArray, arr);

		try {
			testGameState = ClientPacketEncoder.decodeGameState(testGameState, arr, ret);
		} catch (IOException e) {
			fail("decodeGameState: " + e);
		}
	}

}
